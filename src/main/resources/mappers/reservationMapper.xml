<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 예약 네임스페이스(사용영역) 설정 -->
<mapper namespace="com.gsitm.mrs.mappers.ReservationMapper">
	
	<!-- #### 사용자 #### -->
	
	<sql id="roomInfo_columns">
		roomNo, roomName, roomName, workplaceName, workplaceAddress, capacity, nwAvailable, image, adminName
	</sql>
	
	<!-- 마이페이지 캘린더 예약현황 조회 -->
	<select id="getReservationInfo" resultType="Map">
		SELECT res_no                            AS reservationNo, 
		       e.name                            AS empName,
		       room_no                           AS roomNo, 
		       r.NAME 							 AS reservationName,
		       purpose, 
		       To_char(start_date, 'YYYY-MM-DD') AS startDate, 
		       To_char(end_date, 'YYYY-MM-DD')   AS endDate, 
		       snack_want                        AS snackWant, 
		       status 
		FROM   reservation r,
			   employee e
		WHERE  r.emp_no = e.emp_no
			   AND e.emp_no = #{employeeNo} 
	</select>
	
	<!-- 마이페이지 캘린더 상세 조회 -->
	<select id="getCalendarInfo" resultType="map">
		SELECT	e.name                            AS empName,
		       	rm.name                           AS roomName, 
		       	r.name 							  AS reservationName,
		       	purpose, 
		       	To_char(start_date, 'YYYY-MM-DD') AS startDate, 
		       	To_char(end_date, 'YYYY-MM-DD')   AS endDate 
		FROM   	employee e,
			   	reservation r,
			   	room rm
		WHERE  	e.emp_no = r.emp_no
		AND	   	r.room_no = rm.room_no
		AND	   	r.res_no = #{reservationNo} 
	</select>
	
	<!-- 마이페이지 목록형 조회 -->
	<select id="getReservationList" resultType="Map">
		SELECT	r.res_no						AS reservationNo,
				r.name							AS reservationName,
				purpose,
				room_no							AS roomNo,
				To_char(start_date, 'YYYY-MM-DD HH:mm') 	AS startDate, 
		       	To_char(end_date, 'YYYY-MM-DD HH:mm') 		AS endDate,
				d.name							AS departmentName,
				status
		FROM	reservation r,
				lead_department ld,
				department d
		WHERE	r.res_no = ld.res_no
				AND ld.dept_no = d.dept_no
				AND	emp_no = #{employeeNo}
	</select>
	
	<!-- 마이페이지 목록형 예약 취소 -->
	<update id="updateReservation">
		UPDATE	reservation
		SET		status = 3
		WHERE	res_no = #{reservationNo}
	</update>
	
	<!-- 마이페이지 가장 최근 일자 표시 -->
	<select id="getLatestReservation" resultType="Reservation">
		SELECT	res_no,
				emp_no,
				room_no,
				name,
				purpose,
				To_char(start_date, 'YYYY-MM-DD HH:mm') 	AS startDate, 
		       	To_char(end_date, 'YYYY-MM-DD HH:mm') 		AS endDate,
				status
        FROM	reservation
        WHERE 	emp_no = #{employeeNo}
        AND 	start_date = (	SELECT MIN(start_date) 
                            	FROM reservation 
                            	WHERE start_date >= sysdate 
                            	AND emp_no = #{employeeNo})
	</select>
	
	<!-- 대시보드 -->
	<select id="getDashBoard" resultType="map">
		SELECT  r.res_no                        AS reservationNo,
                e.name                          AS empName,
				r.name							AS reservationName,
				purpose,
				rm.name							AS roomName,
				To_char(r.start_date, 'YYYY-MM-DD HH:mm') 	AS startDate, 
		       	To_char(r.end_date, 'YYYY-MM-DD HH:mm') 	AS endDate
		FROM    workplace w,
                room rm,    
                reservation r,
			   	employee e
		WHERE  	w.workplace_no = rm.workplace_no
        and     rm.room_no = r.room_no
        and     r.emp_no = e.emp_no
		AND     w.workplace_no = #{workplaceNo}
	</select>
	
	<!-- 지사별 회의실 목록 조회  -->
	<select id="getRoomListByWorkplaceNo" resultType="Room">
		SELECT room_no, workplace_no, name 
		FROM Room
		WHERE workplace_no = #{workplaceNo}
		ORDER BY room_no
	</select>
	
	<!-- 회의실 정보 조회 -->
	<select id="getRoomInfo" parameterType="int" resultType="Map">
		SELECT <include refid="roomInfo_columns"/>, 
       			LISTAGG(equipmentName,', ') WITHIN GROUP(ORDER BY roomNo) AS equipments       		
		FROM  (SELECT room.room_no      AS roomNo, 
		              room.name         AS roomName, 
		              workplace.name    AS workplaceName, 
		              workplace.address AS workplaceAddress, 
		              room.capacity, 
		              room.nw_available AS nwAvailable, 
		              room.image, 
		              employee.name     AS adminName, 
		              equipment.name    AS equipmentName 
		       FROM   room, 
		              workplace, 
		              employee, 
		              ADMIN, 
		              equipment 
		       WHERE  room.workplace_no = workplace.workplace_no 
		              AND room.admin_id = ADMIN.admin_id 
		              AND ADMIN.emp_no = employee.emp_no 
		              AND room.room_no = equipment.room_no(+) 
		              AND room.room_no = #{roomNo}) 
		GROUP  BY <include refid="roomInfo_columns"/>
	</select>
	
	<!-- 회의실 정보 조회 -->
	<select id="getRoomList" parameterType="int" resultType="Map">
		SELECT <include refid="roomInfo_columns"/>, 
       			LISTAGG(equipmentName,', ') WITHIN GROUP(ORDER BY roomNo)        		
		FROM  (SELECT room.room_no      AS roomNo, 
		              room.name         AS roomName, 
		              workplace.name    AS workplaceName, 
		              workplace.address AS workplaceAddress, 
		              room.capacity, 
		              room.nw_available AS nwAvailable, 
		              room.image, 
		              employee.name     AS adminName, 
		              equipment.name    AS equipmentName 
		       FROM   room, 
		              workplace, 
		              employee, 
		              ADMIN, 
		              equipment 
		       WHERE  room.workplace_no = workplace.workplace_no 
		              AND room.admin_id = ADMIN.admin_id 
		              AND ADMIN.emp_no = employee.emp_no 
		              AND room.room_no = equipment.room_no(+) 
		              AND room.workplace_no = #{workplaceNo}) 
		GROUP  BY <include refid="roomInfo_columns"/>
	</select>
	
	<!-- 회의실 비품 목록 조회 -->
	<select id="getEquipmentList" parameterType="int" resultType="Map">
		SELECT *
		FROM equipment
		JOIN room
		USING(room_no)
		WHERE room_no=#{roomNo}
	</select>
	
	<!-- 사원 정보 조회 -->
	<select id="getEmployeeInfo" parameterType="String" resultType="Employee">
		SELECT *
		FROM employee
		WHERE emp_no=#{employeeNo}
	</select>
	
	<!-- 초성에 해당하는 사원 목록 조회 -->
	<select id="getEmployeeListByChosung" parameterType="String" resultType="Map">
		SELECT  employee.name 		AS name, 
				emp_no 				AS employeeNo, 
				department.name 	AS departmentName
		FROM employee
		JOIN department 
		USING(dept_no)
		WHERE
		<choose>
			<when test='_parameter.equals("ㄱ")'>
				employee.name BETWEEN '가' AND '나'
			</when>
			<when test='_parameter.equals("ㄴ")'>
				employee.name BETWEEN '나' AND '다'
			</when>
			<when test='_parameter.equals("ㄷ")'>
				employee.name BETWEEN '다' AND '라'
			</when>
			<when test='_parameter.equals("ㄹ")'>
				employee.name BETWEEN '라' AND '마'
			</when>
			<when test='_parameter.equals("ㅁ")'>
				employee.name BETWEEN '마' AND '바'
			</when>
			<when test='_parameter.equals("ㅂ")'>
				employee.name BETWEEN '바' AND '사'
			</when>
			<when test='_parameter.equals("ㅅ")'>
				employee.name BETWEEN '사' AND '아'
			</when>
			<when test='_parameter.equals("ㅇ")'>
				employee.name BETWEEN '아' AND '자'
			</when>
			<when test='_parameter.equals("ㅈ")'>
				employee.name BETWEEN '자' AND '차'
			</when>
			<when test='_parameter.equals("ㅊ")'>
				employee.name BETWEEN '차' AND '카'
			</when>
			<when test='_parameter.equals("ㅋ")'>
				employee.name BETWEEN '카' AND '타'
			</when>
			<when test='_parameter.equals("ㅌ")'>
				employee.name BETWEEN '타' AND '파'
			</when>
			<when test='_parameter.equals("ㅍ")'>
				employee.name BETWEEN '파' AND '하'
			</when>
			<when test='_parameter.equals("ㅎ")'>
				employee.name BETWEEN '하' AND '힣'
			</when>
		</choose>
	</select>
	
	<!-- 검색 키워드에 해당하는 사원 목록 조회  -->
	<select id="getEmployeeListBySearching" parameterType="String" resultType="Map">
		SELECT  employee.name 		AS name, 
				emp_no 				AS employeeNo, 
				department.name 	AS departmentName
		FROM employee
		JOIN department 
		USING(dept_no)
		WHERE employee.name LIKE '%' || #{keyword} || '%'
	</select>
	
	<select id="getDepartmentList" parameterType="Map" resultType="Map">
		SELECT DISTINCT(dept_no) AS dept_no, department.name AS name
		FROM department
		JOIN employee
		USING(dept_no)
		WHERE emp_no IN
		<foreach collection="employeeNoArr" item="empNo" separator="," open="(" close=")">
			#{empNo}
		</foreach>
		<if test="mainDeptList.size()!=0">
			AND dept_no NOT IN
		<foreach collection="mainDeptList" item="deptNo" separator="," open="(" close=")">
			#{deptNo}
		</foreach>
		</if>
	</select>
	
	<!-- 사원번호에 해당하는 사원들 정보 조회 -->
	<select id="getEmployeeList" parameterType="java.util.ArrayList" resultType="Map">
		SELECT  employee.name 		AS name, 
				employee.emp_no 	AS empNo, 
				department.name 	AS departmentName
		FROM department
		JOIN employee
		USING(dept_no)
		WHERE emp_no in
		<foreach collection="list" item="empNo" separator="," open="(" close=")">
			#{empNo}
		</foreach>
	</select>
	
	<!-- 부서번호에 해당하는 부서 정보 조회 -->
	<select id="getDepartmentListByDeptNo" parameterType="java.util.ArrayList" resultType="Map">
		SELECT dept_no, department.name AS name
		FROM department
		WHERE dept_no in
		<foreach collection="list" item="deptNo" separator="," open="(" close=")">
			#{deptNo}
		</foreach>
	</select>
	
	<!-- 비품번호에 해당하는 비품 정보 조회 -->
	<select id="getEquipmentsByEquipNo" parameterType="java.util.ArrayList" resultType="Map">
		SELECT *
		FROM equipment
		WHERE equip_no in
		<foreach collection="list" item="equipNo" separator="," open="(" close=")">
			#{equipNo}
		</foreach>
	</select>
	
	<!-- 예약 번호 조회 -->
	<select id="getReservationNo" resultType="int">
		SELECT Reservation_Seq.NEXTVAL
		FROM DUAL
	</select>
	
	<!-- 예약정보 DB에 삽입 -->
	<insert id="insertReservation" parameterType="Reservation"> 
		INSERT INTO reservation(res_no, emp_no, room_no, name, purpose, start_date, end_date, snack_want) 
		VALUES (#{reservationNo}, #{employeeNo}, #{roomNo}, #{name}, #{purpose}, TO_DATE(#{startDate}, 'YYYY-MM-DD HH24:MI'), TO_DATE(#{endDate}, 'YYYY-MM-DD HH24:MI'), #{snackWant})
	</insert>
	
	<!-- 대기 예약 DB에 삽입  -->
	<insert id="insertWaiting" parameterType="int">
		INSERT INTO waiting(res_no) 
		VALUES (#{resNo})
	</insert>
	
	<!-- 회의 참여 부서 DB에 삽입 -->
	<insert id="insertParticipateDepartment" parameterType="Map">
		INSERT INTO lead_department(res_no, dept_no, is_main) 
		VALUES (#{resNo}, #{deptNo}, #{isMain})
	</insert>
	
	<!-- 회의 대여 비품 DB에 삽입 -->
	<insert id="insertBorrowedEquipments" parameterType="Map">
		INSERT INTO borrowed_equipment(equip_no, res_no) 
		VALUES (#{equipNo}, #{resNo})
	</insert>
	
	<!-- #### 관리자 #### -->
	
	<!-- 승인 대기 목록 조회 -->
	<select id="getWaitingList" resultType="Map">
		SELECT r.res_no         					AS reservationNo, 
		       w.mgr_approval   					AS managerApproval, 
		       w.admin_approval 					AS adminApproval, 
		       r.name           					AS resName, 
		       r.purpose, 
		       room.name        					AS roomName, 
		       To_char(r.start_date, 'YYYY-MM-DD HH:mm') 	AS startDate, 
		       To_char(r.end_date, 'YYYY-MM-DD HH:mm') 		AS endDate, 
		       e.name           					AS empName, 
		       e2.name          					AS mgrName
		FROM   waiting w, 
		       reservation r, 
		       room room, 
		       employee e, 
		       employee e2 
		WHERE  w.res_no = r.res_no 
		       AND r.room_no = room.room_no 
		       AND r.emp_no = e.emp_no 
		       AND e.mgr_no = e2.emp_no 
		       AND r.status = 0
		       AND ( w.mgr_approval = 'W' OR w.admin_approval = 'W' ) 
		ORDER BY r.res_no
	</select>
	
	<!-- 예약 상태 변경 -->
	<!-- 0 : 예약 대기
		 1 : 예약 승인
		 2 : 예약 반려
		 3 : 예약 취소 -->
	<update id="updateStatus">
		UPDATE reservation SET status = #{status} WHERE res_no = #{reservationNo}
	</update>
	
	<!-- 관리자 승인 상태 변경 -->
	<update id="updateAdminApproval">
		UPDATE waiting 
		SET admin_approval = #{adminApproval} 
		WHERE res_no = #{reservationNo}
	</update>
	
	<!-- 반려 사유 추가 -->
	<update id="insertRefuse">
		INSERT INTO refuse(res_no, reason) VALUES (#{reservationNo}, #{reason})
	</update>
	
	<!-- 승인 반려 목록 조회 -->
	<select id="getApprovalCancelList" resultType="Map">
		SELECT r.res_no     							 AS reservationNo, 
		       r.name       							 AS resName, 
		       r.purpose, 
		       room.name    							 AS roomName, 
		       To_char(r.start_date, 'YYYY-MM-DD HH:mm') AS startDate, 
		       To_char(r.end_date, 'YYYY-MM-DD HH:mm')   AS endDate, 
		       e.name       							 AS empName, 
		       refuse.reason 
		FROM   reservation r, refuse, room, employee e 
		WHERE  r.res_no = refuse.res_no 
       	AND r.room_no = room.room_no 
       	AND r.emp_no = e.emp_no 
       	AND r.status = 2 
       	ORDER BY r.res_no
	</select>
	
	<!-- 예약 완료 목록 조회 -->
	<select id="getSuccessList" resultType="Map">
		SELECT r.res_no         					AS reservationNo, 
		       r.name           					AS resName, 
		       r.purpose, 
		       room.name        					AS roomName, 
		       To_char(r.start_date, 'YYYY-MM-DD HH:mm') 	AS startDate, 
		       To_char(r.end_date, 'YYYY-MM-DD HH:mm') 		AS endDate, 
		       e.name           					AS empName, 
		       e2.name          					AS mgrName
		FROM   reservation r, 
		       room room, 
		       employee e, 
		       employee e2 
		WHERE  r.room_no = room.room_no 
        AND r.emp_no = e.emp_no 
        AND e.mgr_no = e2.emp_no 
        AND r.status = 1
		ORDER BY r.res_no
	</select>
	
	<!-- 예약 취소 목록 조회 -->
	<select id="getReservationCancelList" resultType="Map">
		SELECT r.res_no     							 AS reservationNo, 
		       r.name       							 AS resName, 
		       r.purpose, 
		       room.name    							 AS roomName, 
		       To_char(r.start_date, 'YYYY-MM-DD HH:mm') AS startDate, 
		       To_char(r.end_date, 'YYYY-MM-DD HH:mm')   AS endDate, 
		       e.name       							 AS empName, 
		       c.reason 
		FROM   reservation r, cancel c, room, employee e 
		WHERE  r.res_no = c.res_no
       	AND r.room_no = room.room_no 
       	AND r.emp_no = e.emp_no 
       	AND r.status = 3
       	ORDER BY r.res_no
	</select>
	
</mapper>